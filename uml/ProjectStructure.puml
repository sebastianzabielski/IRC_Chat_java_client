@startuml
sprite $readonly[16x16/16z] {
DOzH4iKW20CV4Y1jt-ZzRrl0kZ-w4pFWMibDydhMnmneOfpRG-696LiV82gX-R_yKf-xPdUTLDyzjgjx8CawcGb-1n5f7z8CrNOPK34JsF5yOD5vdDnZm51k
dLSTd-Sbry-1dukSSUtr5uyDrmi0
}

class Connection {
   - ip: String
   - port: int
   - socket: Socket
   - output: DataOutputStream
   - input: BufferedReader

   + Connection(ip: String, port: int)
   - createSocket(ip: String, port: int)

   # receive()
   # receive(byteLength: int)
   # receive(searchSequence: String)

   # send(content: String)

   + reconnect()
   + closeSocket()
}

class Client extends Connection {
 + Client(ip: String, port: int)
 + Client()
}

note left of Client::Client
 constructor throw error
end note

note left of Client::Client()
 throw error if connection was
 not initialized by other constructor
end note

class IRCSocket {
     - client: Client

     + IRCSocket()

     + onReceive()

     + register()
     + login()
'    TODO complete missing methods


}
IRCSocket::client *-- Client

note left of IRCSocket::onReceive()
 method should be overridden
 each time new instance of class is created,
 otherwise throw an error
end note

package "dataStructures" #DDDDDD {

  class Receive {
    <$readonly> header:  Map<String, Object>
    <$readonly> body:  Map<String, Object>

    + Receive(header: Map<String, Object>)
    + Receive(header: Map<String, Object>, body: Map<String, Object>)
    + Receive(header: String)
    + Receive(header: String, body:  String)

    + {static} parseStringToMap(string: String)
    + {static} parseStringToJavaType(string: String): Object

    + setBody(body: String): void
    + setBody(body: Map<String, Object>)

    + getHeader(): Map<String, Object>
    + getBody(): Map<String, Object>
  }
}

@enduml

